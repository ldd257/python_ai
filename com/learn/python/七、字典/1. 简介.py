"""
可变类型与不可变类型
1. 序列是以连续的整数为索引，与此不同的是，字典以"关键字"为索引，关键字可以是任意不可变类型，通常用字符串
或数值。
2. 字典是 Python 唯一的一个 映射类型，字符串、元组、列表属于序列类型。
那么如何快速判断一个数据类型 X 是不是可变类型的呢？两种方法：
1. 麻烦方法：用 id(X) 函数，对 X 进行某种操作，比较操作前后的 id ，如果不一样，则 X 不可变，如果一样，则
X 可变。
2. 便捷方法：用 hash(X) ，只要不报错，证明 X 可被哈希，即不可变，反过来不可被哈希，即可变。
"""
i = 1
print(id(i)) # 140732167000896
i = i + 2
print(id(i)) # 140732167000960
l = [1, 2]
print(id(l)) # 4300825160
l.append('Python')
print(id(l)) # 4300825160

"""
整数 i 在加 1 之后的 id 和之前不一样，因此加完之后的这个 i (虽然名字没变)，但不是加之前的那个 i 了，因
此整数是不可变类型。
2. 列表 l 在附加 'Python' 之后的 id 和之前一样，因此列表是可变类型。

1. 数值、字符和元组 都能被哈希，因此它们是不可变类型。
2. 列表、集合、字典不能被哈希，因此它是可变类型。
"""
print(hash('Name')) # -9215951442099718823
print(hash((1, 2, 'Python'))) # 823362308207799471
print(hash([1, 2, 'Python']))
# TypeError: unhashable type: 'list'
print(hash({1, 2, 3}))
# TypeError: unhashable type: 'set'


"""
字典的定义
字典 是无序的 键:值（ key:value ）对集合，键必须是互不相同的（在同一个字典之内）。
1. dict 内部存放的顺序和 key 放入的顺序是没有关系的。
2. dict 查找和插入的速度极快，不会随着 key 的增加而增加，但是需要占用大量的内存。
字典 定义语法为 {元素1, 元素2, ..., 元素n}
1. 其中每一个元素是一个「键值对」-- 键:值 ( key:value )
2. 关键点是「大括号 {}」,「逗号 ,」和「冒号 :」
3. 大括号 -- 把所有元素绑在一起
4. 逗号 -- 将每个键值对分开
5. 冒号 -- 将键和值分开 
"""